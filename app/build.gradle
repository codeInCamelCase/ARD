apply plugin: 'checkstyle'
apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'realm-android'

ext {
    androidTestVer = "0.5"
    buildToolsVer = "26.0.0"
    butterknifeVer = "8.6.0"
    checkstyleVer = '7.7'
    compileSdkVer = 25
    constraintVer = "1.0.2"
    dexMakerVer = "1.2"
    espContVer = "2.2.2"
    espCoreVer = "2.2.2"
    espIntVer = "2.2.2"
    espUIAVer = "2.1.2"
    firebaseVer = "11.0.0"
    hamcrestVer = "1.3"
    jacocoVer = "0.7.9"
    junitVer = "4.12"
    minSdkVer = 21
    mockitoVer = "2.8.9"
    supportVer = "25.4.0"
    targetSdkVer = 25
    verCode = 1
    verName = "1.0"
    glideVer = "4.0.0-RC0"
}

def configDir = "${project.rootDir}/config/"

android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer
    defaultConfig {
        applicationId "com.macbitsgoa.ard"
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        versionCode verCode
        versionName verName
        multiDexEnabled true
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            testCoverageEnabled true
            versionNameSuffix '-debug'
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            multiDexKeepFile file("${configDir}/multidex/multidex.txt")
        }
    }
    lintOptions {
        abortOnError true
        htmlReport true
        ignoreWarnings false
        lintConfig file("$configDir/lint/lint.xml")
        xmlReport true
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:appcompat-v7:${supportVer}"
    compile "com.android.support:support-v4:${supportVer}"
    compile "com.android.support:design:${supportVer}"
    compile "com.android.support.constraint:constraint-layout:${constraintVer}"

    compile "com.jakewharton:butterknife:${butterknifeVer}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${butterknifeVer}"
    compile "com.google.firebase:firebase-core:${firebaseVer}"
    compile "com.google.firebase:firebase-database:${firebaseVer}"
    compile "com.google.firebase:firebase-storage:${firebaseVer}"
    compile "com.google.firebase:firebase-auth:${firebaseVer}"
    compile "com.google.firebase:firebase-messaging:${firebaseVer}"

    compile "com.github.bumptech.glide:glide:${glideVer}"
    annotationProcessor "com.github.bumptech.glide:compiler:${glideVer}"

    //Unit test compiles
    testCompile "junit:junit:${junitVer}"
    testCompile "org.mockito:mockito-core:${mockitoVer}"

    //Android test compiles
    androidTestCompile "com.google.dexmaker:dexmaker:${dexMakerVer}"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:${dexMakerVer}"
    androidTestCompile "org.hamcrest:hamcrest-library:${hamcrestVer}"
    androidTestCompile "org.mockito:mockito-core:${mockitoVer}"

    androidTestCompile("com.android.support.test.espresso:espresso-core:${espCoreVer}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestCompile("com.android.support.test.espresso:espresso-contrib:${espContVer}") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
    }

    androidTestCompile("com.android.support.test:runner:${androidTestVer}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestCompile("com.android.support.test:rules:${androidTestVer}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestCompile("com.android.support.test.espresso:espresso-intents:${espIntVer}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestCompile("com.android.support.test.uiautomator:uiautomator-v18:${espUIAVer}", {
        exclude group: 'com.android.support', module: 'support-annotations'

    })

}

checkstyle {
    toolVersion = checkstyleVer
}

jacoco {
    toolVersion = jacocoVer
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat 'full'
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
    }
}

check.dependsOn 'checkstyle'

task checkstyle(type: Checkstyle) {
    configFile file("$configDir/checkstyle/checkstyle.xml")
    configProperties = [ "suppressionFile" : project(':').file("${configDir}/checkstyle/suppressions.xml")]

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/test/**/*.java'
    exclude '**/androidTest/**/*.java'

    classpath = files()
    reports {
        xml.enabled true
        html.enabled true
    }
}

apply plugin: 'com.google.gms.google-services'
